diff --git a/include/ogdf/fileformats/GraphIO.h b/include/ogdf/fileformats/GraphIO.h
index 32c42cf..fd94da6 100644
--- a/include/ogdf/fileformats/GraphIO.h
+++ b/include/ogdf/fileformats/GraphIO.h
@@ -38,6 +38,8 @@
 #include <ogdf/graphalg/steiner_tree/EdgeWeightedGraph.h>
 #include <sstream>
 
+#define OGDF_TEXTRENDERING_PATCH
+
 
 namespace ogdf {
 
@@ -74,6 +76,7 @@ public:
 		string m_fontFamily;
 		string m_width;
 		string m_height;
+		bool m_textRendering;
 
 	public:
 		SVGSettings();
@@ -102,6 +105,9 @@ public:
 		//! Returns the default height
 		const string &height() const { return m_height; }
 
+		//! Returns if text rendering is enabled
+		const bool &textRendering() const { return m_textRendering; }
+
 		//! Sets the size of the margin around the drawing to \p m.
 		void margin(double m) { m_margin = m; }
 
@@ -136,6 +142,9 @@ public:
 		 * The value should include a unit of measure (e.g., percentage for relative height or pixel values).
 		 */
 		void height(const string &height) { m_height = height; }
+
+		//! Sets if text rendering is enabled.
+		void textRendering(bool textRendering) { m_textRendering = textRendering; }
 	};
 
 	/**
diff --git a/src/ogdf/fileformats/SvgPrinter.cpp b/src/ogdf/fileformats/SvgPrinter.cpp
index 93dd20d..2436de4 100644
--- a/src/ogdf/fileformats/SvgPrinter.cpp
+++ b/src/ogdf/fileformats/SvgPrinter.cpp
@@ -49,12 +49,23 @@ GraphIO::SVGSettings::SVGSettings()
 	m_fontFamily = "Arial";
 	m_width = "";
 	m_height = "";
+	m_textRendering = true;
 }
 
 bool SvgPrinter::draw(std::ostream &os)
 {
 	pugi::xml_document doc;
 	pugi::xml_node rootNode = writeHeader(doc);
+	rootNode = rootNode.append_child("g");
+	rootNode.append_attribute("stroke") = "#000000";
+	rootNode.append_attribute("stroke-width") = "1px";
+	if (m_settings.textRendering())
+	{
+		rootNode.append_attribute("text-anchor") = "middle";
+		rootNode.append_attribute("dominant-baseline") = "middle";
+		rootNode.append_attribute("font-family") = "Arial";
+		rootNode.append_attribute("font-size") = "10";
+	}
 
 	if(m_clsAttr) {
 		drawClusters(rootNode);
@@ -63,7 +74,7 @@ bool SvgPrinter::draw(std::ostream &os)
 	drawEdges(rootNode);
 	drawNodes(rootNode);
 
-	doc.save(os);
+	doc.save(os, "", pugi::format_default & ~pugi::format_indent);
 
 	return true;
 }
@@ -71,9 +82,6 @@ bool SvgPrinter::draw(std::ostream &os)
 pugi::xml_node SvgPrinter::writeHeader(pugi::xml_document &doc)
 {
 	pugi::xml_node rootNode = doc.append_child("svg");
-	rootNode.append_attribute("xmlns") = "http://www.w3.org/2000/svg";
-	rootNode.append_attribute("xmlns:xlink") = "http://www.w3.org/1999/xlink";
-	rootNode.append_attribute("xmlns:ev") = "http://www.w3.org/2001/xml-events";
 	rootNode.append_attribute("version") = "1.1";
 	rootNode.append_attribute("baseProfile") = "full";
 
@@ -143,7 +151,7 @@ void SvgPrinter::drawNode(pugi::xml_node xmlNode, node v)
 	std::stringstream is;
 	double x = m_attr.x(v);
 	double y = m_attr.y(v);
-	xmlNode = xmlNode.append_child("g");
+	//xmlNode = xmlNode.append_child("g");
 
 	// values are precomputed to save expensive sin/cos calls
 	switch (m_attr.shape(v)) {
@@ -254,27 +262,27 @@ void SvgPrinter::drawNode(pugi::xml_node xmlNode, node v)
 
 	if (m_attr.has(GraphAttributes::nodeStyle)) {
 		shape.append_attribute("fill") = m_attr.fillColor(v).toString().c_str();
-		shape.append_attribute("stroke-width") = (to_string(m_attr.strokeWidth(v)) + "px").c_str();
+		// shape.append_attribute("stroke-width") = (to_string(m_attr.strokeWidth(v)) + "px").c_str();
 
-		StrokeType lineStyle = m_attr.has(GraphAttributes::nodeStyle) ? m_attr.strokeType(v) : StrokeType::Solid;
+		// StrokeType lineStyle = m_attr.has(GraphAttributes::nodeStyle) ? m_attr.strokeType(v) : StrokeType::Solid;
 
-		if(lineStyle == StrokeType::None) {
-			shape.append_attribute("stroke") = "none";
-		} else {
-			shape.append_attribute("stroke") = m_attr.strokeColor(v).toString().c_str();
-			writeDashArray(shape, lineStyle, m_attr.strokeWidth(v));
-		}
+		// if(lineStyle == StrokeType::None) {
+		// 	shape.append_attribute("stroke") = "none";
+		// } else {
+		// 	shape.append_attribute("stroke") = m_attr.strokeColor(v).toString().c_str();
+		// 	writeDashArray(shape, lineStyle, m_attr.strokeWidth(v));
+		// }
 	}
 
-	if (m_attr.has(GraphAttributes::nodeLabel)) {
+	if (m_settings.textRendering() && m_attr.has(GraphAttributes::nodeLabel)) {
 		pugi::xml_node label = xmlNode.append_child("text");
 		label.append_attribute("x") = m_attr.x(v);
 		label.append_attribute("y") = m_attr.y(v);
-		label.append_attribute("text-anchor") = "middle";
-		label.append_attribute("dominant-baseline") = "middle";
-		label.append_attribute("font-family") = m_settings.fontFamily().c_str();
-		label.append_attribute("font-size") = m_settings.fontSize();
-		label.append_attribute("fill") = m_settings.fontColor().c_str();
+		// label.append_attribute("text-anchor") = "middle";
+		// label.append_attribute("dominant-baseline") = "middle";
+		// label.append_attribute("font-family") = m_settings.fontFamily().c_str();
+		// label.append_attribute("font-size") = m_settings.fontSize();
+		// label.append_attribute("fill") = m_settings.fontColor().c_str();
 		label.text() = m_attr.label(v).c_str();
 
 		if(m_attr.has(GraphAttributes::nodeLabelPosition)) {
@@ -327,7 +335,8 @@ void SvgPrinter::drawClusters(pugi::xml_node xmlNode)
 
 	while(!queue.empty()) {
 		cluster c = queue.pop();
-		drawCluster(xmlNode.append_child("g"), c);
+		//drawCluster(xmlNode.append_child("g"), c);
+		drawCluster(xmlNode, c);
 
 		for(cluster child : c->children) {
 			queue.append(child);
@@ -338,7 +347,7 @@ void SvgPrinter::drawClusters(pugi::xml_node xmlNode)
 void SvgPrinter::drawEdges(pugi::xml_node xmlNode)
 {
 	if (m_attr.has(GraphAttributes::edgeGraphics)) {
-		xmlNode = xmlNode.append_child("g");
+		//xmlNode = xmlNode.append_child("g");
 
 		for(edge e : m_attr.constGraph().edges) {
 			drawEdge(xmlNode, e);
@@ -351,13 +360,13 @@ void SvgPrinter::appendLineStyle(pugi::xml_node line, edge e) {
 	StrokeType lineStyle = m_attr.has(GraphAttributes::edgeStyle) ? m_attr.strokeType(e) : StrokeType::Solid;
 
 	if(lineStyle != StrokeType::None) {
-		if (m_attr.has(GraphAttributes::edgeStyle)) {
-			line.append_attribute("stroke") = m_attr.strokeColor(e).toString().c_str();
-			line.append_attribute("stroke-width") = (to_string(m_attr.strokeWidth(e)) + "px").c_str();
-			writeDashArray(line, lineStyle, m_attr.strokeWidth(e));
-		} else {
-			line.append_attribute("stroke") = "#000000";
-		}
+		// if (m_attr.has(GraphAttributes::edgeStyle)) {
+		// 	line.append_attribute("stroke") = m_attr.strokeColor(e).toString().c_str();
+		// 	line.append_attribute("stroke-width") = (to_string(m_attr.strokeWidth(e)) + "px").c_str();
+		// 	writeDashArray(line, lineStyle, m_attr.strokeWidth(e));
+		// } else {
+		// 	line.append_attribute("stroke") = "#000000";
+		// }
 	}
 }
 
@@ -423,17 +432,17 @@ void SvgPrinter::drawEdge(pugi::xml_node xmlNode, edge e) {
 		}
 	}
 
-	xmlNode = xmlNode.append_child("g");
-	bool drawLabel = m_attr.has(GraphAttributes::edgeLabel) && !m_attr.label(e).empty();
+	//xmlNode = xmlNode.append_child("g");
+	bool drawLabel = m_settings.textRendering() && m_attr.has(GraphAttributes::edgeLabel) && !m_attr.label(e).empty();
 	pugi::xml_node label;
 
 	if(drawLabel) {
 		label = xmlNode.append_child("text");
-		label.append_attribute("text-anchor") = "middle";
-		label.append_attribute("dominant-baseline") = "middle";
-		label.append_attribute("font-family") = m_settings.fontFamily().c_str();
-		label.append_attribute("font-size") = m_settings.fontSize();
-		label.append_attribute("fill") = m_settings.fontColor().c_str();
+		// label.append_attribute("text-anchor") = "middle";
+		// label.append_attribute("dominant-baseline") = "middle";
+		// label.append_attribute("font-family") = m_settings.fontFamily().c_str();
+		// label.append_attribute("font-size") = m_settings.fontSize();
+		// label.append_attribute("fill") = m_settings.fontColor().c_str();
 		label.text() = m_attr.label(e).c_str();
 	}
 
@@ -595,7 +604,7 @@ pugi::xml_node SvgPrinter::drawCurve(pugi::xml_node xmlNode, edge e, List<DPoint
 		}
 	}
 
-	line.append_attribute("fill") = "none";
+	// line.append_attribute("fill") = "none";
 	line.append_attribute("d") = ss.str().c_str();
 	appendLineStyle(line, e);
 
